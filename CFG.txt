PROG ::= main GLOBVARS ALGO FUNCTIONS
GLOBVARS ::= ε
GLOBVARS ::= VTYP VNAME , GLOBVARS
VTYP ::= num
VTYP ::= text
ALGO ::= begin INSTRUC end
INSTRUC ::= ε
INSTRUC ::= COMMAND ; INSTRUC
COMMAND ::= skip
COMMAND ::= halt
COMMAND ::= print ATOMIC
COMMAND ::= ASSIGN
COMMAND ::= CALL
COMMAND ::= BRANCH
ATOMIC ::= VNAME
ATOMIC ::= CONST
ASSIGN ::= VNAME < input
ASSIGN ::= VNAME = TERM
CALL ::= FNAME ( ATOMIC , ATOMIC , ATOMIC )
BRANCH ::= if COND then ALGO else ALGO
TERM ::= ATOMIC
TERM ::= CALL
TERM ::= OP
OP ::= UNOP ( ARG )
OP ::= BINOP ( ARG , ARG )
ARG ::= ATOMIC
ARG ::= OP
COND ::= SIMPLE
COND ::= COMPOSIT
SIMPLE ::= BINOP ( ATOMIC , ATOMIC )
COMPOSIT ::= BINOP ( SIMPLE , SIMPLE )
COMPOSIT ::= UNOP ( SIMPLE )
UNOP ::= not
UNOP ::= sqrt
BINOP ::= or
BINOP ::= and
BINOP ::= eq
BINOP ::= grt
BINOP ::= add
BINOP ::= sub
BINOP ::= mul
BINOP ::= div
FUNCTIONS ::= ε
FUNCTIONS ::= DECL FUNCTIONS
DECL ::= HEADER BODY
HEADER ::= FTYP FNAME ( VNAME , VNAME , VNAME )
FTYP ::= num
FTYP ::= void
BODY ::= PROLOG LOCVARS ALGO EPILOG end
PROLOG ::= {
EPILOG ::= }
LOCVARS ::= VTYP VNAME , VTYP VNAME , VTYP VNAME ,
SUBFUNCS ::= FUNCTIONS
VNAME ::= RGX_V_[a-z]([a-z]|[0-9])*
FNAME ::= RGX_F_[a-z]([a-z]|[0-9])*
CONST ::= RGX_^-?\d+(\.\d+)?$
CONST ::= RGX_\"[A-Z]([a-z]){0,7}\"